name: Generate and post screenshot

on:
  workflow_dispatch:
  schedule:
  - cron: '0 14 * * *'

jobs:
  post:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Configure Python with pip cache
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: ~/.cache/ms-playwright/
        key: ${{ runner.os }}-browsers
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    - name: Install Playwright browser
      run: |
        shot-scraper install -b firefox
    - name: Extract iframe URL and generate screenshot
      run: |-
        url=$(shot-scraper javascript \
          'https://publichealth.santaclaracounty.gov/health-information/health-data/disease-data/covid-19/covid-19-wastewater' \
          'document.querySelector("iframe").src' \
          -b firefox \
          --user-agent 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:128.0) Gecko/20100101 Firefox/128.0' \
          --raw)
        echo "URL is $url"
        shot-scraper $url --javascript -o /tmp/covid.png -b firefox --retina --javascript '
        new Promise((takeShot) => {
          setTimeout(() => {
            // Find the <visual-modern> button with exact text COVID
            var el = Array.from(document.querySelectorAll(".ui-role-button-text"))
              .filter((el) => el.textContent.trim() == "COVID")[0]
              .closest("visual-modern");
            // Click everything in it to catch the <path> element
            function clickAllMatchingDescendants(rootElement, selector) {
              // Find all matching descendants
              const matchingElements = rootElement.querySelectorAll(selector);
              // Dispatch click event to each matching element
              matchingElements.forEach((element) => {
                element.dispatchEvent(
                  new MouseEvent("click", {
                    bubbles: true,
                    cancelable: true,
                    view: window,
                  }),
                );
              });
            }
            clickAllMatchingDescendants(el, "path");
            setTimeout(() => {
              // After 2s take the shot
              takeShot();
            }, 2000);
          }, 3000);
        });
        '
    - name: Upload screenshot
      uses: actions/upload-artifact@v4
      with:
        name: screenshot
        path: /tmp/covid.png
    - name: Generate image description
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |-
        python -c "
        import base64, openai
        client = openai.OpenAI()
        with open('/tmp/covid.png', 'rb') as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
        messages = [
            {'role': 'system', 'content': 'Return the concentration levels in the sewersheds - single paragraph, no markdown'},
            {'role': 'user', 'content': [
                {'type': 'image_url', 'image_url': {
                    'url': 'data:image/png;base64,' + encoded_image
                }}
            ]}
        ]
        completion = client.chat.completions.create(model='gpt-4o', messages=messages)
        print(completion.choices[0].message.content)
        " > image_description.txt
    - name: Toot the new image
      env:
        TOOT_CONFIG: ${{ secrets.MASTODON_TOOT_CONFIG }}
      run: |-
        mkdir -p ~/.config/toot
        echo $TOOT_CONFIG > ~/.config/toot/config.json
        image_description=$(cat image_description.txt)
        toot post "Latest Covid sewage charts for Santa Clara County, CA https://publichealth.santaclaracounty.gov/health-information/health-data/disease-data/covid-19/covid-19-wastewater" \
          --media /tmp/covid.png --description "$image_description" > latest-toot.md
    - name: Configure Git for commits
      run: |-
        git config user.name "Automated"
        git config user.email "actions@users.noreply.github.com"
    - name: Commit latest-toot.md and latest-tweet.md
      run: |-
        git add -A
        timestamp=$(date -u)
        git commit -m "${timestamp}" || exit 0
        git push
